# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    domain: '%env(LDAP_ACCOUNTDOMAINNAME)%'
    ldap_users_dn: '%env(LDAP_USERS_DN)%'
    ldap_users_uuid: '%env(LDAP_USERS_UUID)%'
    # Use {username} in the filter where the username has to be replaced.
    ldap_users_filter: '(&(objectclass=Person)(%env(LDAP_USERS_UUID)%={username}))'
    receipt_files_directory: '%kernel.project_dir%/public/uploads/receipt_files'
    mailer_user: '%env(MAILER_USER)%'
    delivery_addresses: '%env(MAILER_SENT_TO)%'
    mipago.sender: '%env(MIPAGO_SENDER)%'
    mailer_sendConfirmation: '%env(bool:MAILER_SEND_CONFIRMATION)%'
    mailer_sendBCC: '%env(bool:MAILER_SEND_BCC)%'
    mailer_BCC_email: '%env(MAILER_BCC_EMAIL)%'
    mailer_from: '%env(MAILER_BCC_EMAIL)%'

services:
    
    Symfony\Component\Ldap\Ldap:
        arguments: ['@Symfony\Component\Ldap\Adapter\ExtLdap\Adapter']

    ldap:
        alias: Symfony\Component\Ldap\Ldap
            
    Symfony\Component\Ldap\Adapter\ExtLdap\Adapter:
        arguments:
            -   host: '%env(LDAP_HOST)%'
                port: '%env(LDAP_PORT)%'
                encryption: none
                options:
                    protocol_version: 3
                    referrals: false    
    
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Service\FileUploader:
        arguments:
            $targetDirectory: '%receipt_files_directory%'
    
    App\Service\CsvFormatValidator: null

    App\Security\LoginFormAuthenticator:
        class: App\Security\LoginFormAuthenticator
        arguments: ["@doctrine.orm.mysql_entity_manager", "@router.default", "@security.csrf.token_manager", "@security.user_password_encoder.generic", "@Symfony\\Component\\Ldap\\Ldap", "@App\\Repository\\UserRepository", "@service_container"]
    
    
    App\Utils\IgnoreTablesListener:
        class: App\Utils\IgnoreTablesListener
        public: true
        arguments:
            $ignoredEntities:
                [
                    'App:GTWIN\Recibo',
                    'App:GTWIN\TipoIngreso',
                    'App:GTWIN\TipoOperacion',
                    'App:GTWIN\OperacionesExternas',
                    'App:GTWIN\OperacionesRecibo',
                    'App:GTWIN\MensajesError',
                    'App:GTWIN\Person',
                    'App:GTWIN\Institucion',
                    'App:GTWIN\ConceptoContable',
                    'App:GTWIN\ConceptoRenta',
                    'App:GTWIN\Tarifa',
                    'App:GTWIN\InstitucionTipoIngreso'
                ]
        tags:
            - { name: doctrine.event_listener, event: postGenerateSchema }
            
    App\Service\GTWINIntegrationService:
        class: App\Service\GTWINIntegrationService
        public: true
        arguments: ["@doctrine.orm.oracle_entity_manager", "@monolog.logger"]
