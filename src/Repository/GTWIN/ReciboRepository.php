<?php

namespace App\Repository\GTWIN;

use App\Entity\GTWIN\Recibo;
use App\Entity\GTWIN\ReferenciaC60;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query\Expr\Join;

/**
 * ReciboRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReciboRepository extends EntityRepository
{
    //	public function findBy ($numRecibo, $dni) {
    //		$em = $this->em;
    //		$select_template = "SELECT * FROM SP_TRB_RECIBO R, SP_TRB_TIPING T WHERE R.RECCODTIN=T.TINCODTIN AND RECESTADO='P' AND RECSITUAC='V' AND RECNUMREC='{RECNUMREC}' AND RECDNINIF='{RECDNINIF}'";
    //		$params = [
    //			'{RECNUMREC}' => $numRecibo,
    //			'{RECDNINIF}' => substr(
    //					str_pad($dni, 10, "0", STR_PAD_LEFT)
    //					 , 0,-1),
    //		];
    //		$sql = str_replace(array_keys($params), $params, $select_template);
    //		$statement = $em->getConnection()->prepare( $sql );
    //		$statement->execute();
    //		$results = $statement->fetchAll();
    //		return $results;
    //	}

    public function findByNumReciboDni($numRecibo, $dni, $letra): ?Recibo
    {
        $qb = $this->createQueryBuilder('r')
            ->andWhere('r.numeroRecibo = :numeroRecibo')
            ->andWhere('r.dni= :dni')
            ->andWhere('r.letra= :letra')
            ->setParameter('numeroRecibo', $numRecibo)
            ->setParameter('dni', $dni)
            ->setParameter('letra', $letra);
        $result = $qb->getQuery()->getOneOrNullResult();

        return $result;
    }

    public function findByReferenciaC60AndDni($referenciaC60, $dni, $letra): array
    {
        if (null !== $referenciaC60 && strlen($referenciaC60) !== 12) {
            $referenciaC60 = str_pad($referenciaC60, 12,  "0", STR_PAD_LEFT);
        }
        $qb = $this->createQueryBuilder('r')
            ->innerjoin('r.referenciasC60', 'c60');
        if (null !== $referenciaC60) {
            $qb->andWhere('c60.referenciaC60 = :referenciaC60')
                ->setParameter('referenciaC60', $referenciaC60);
        }
        if (null !== $dni) {
            $qb->andWhere('r.dni= :dni')
                ->andWhere('r.letra = :letra')
                ->setParameter('dni', $dni)
                ->setParameter('letra', $letra);
        }
        $qb->andWhere('c60.indClaveCobroAnulada = :anulada')
            ->setParameter('anulada', ReferenciaC60::NO_ANULADA)
            ->orderBy('c60.referenciaC60', 'DESC');
        $result = $qb->getQuery()->getResult();

        return $result;
    }


    //    public function findPendienteNumReciboDni($numRecibo, $dni, $letra): ?Recibo
    //    {
    //        $qb = $this->createQueryBuilder('r')
    //        ->andWhere('r.numeroRecibo = :numeroRecibo')
    //        ->andWhere('r.dni= :dni')
    //        ->andWhere('r.letra= :letra')
    //        ->andWhere('r.situacion = :situacion')
    //        ->andWhere('r.estado = :estado')
    //        ->setParameter('numeroRecibo', $numRecibo)
    //        ->setParameter('dni', $dni)
    //        ->setParameter('letra', $letra)
    //        ->setParameter('situacion', 'V')
    //        ->setParameter('estado', 'P');
    //        $result = $qb->getQuery()->getOneOrNullResult();
    //
    //        return $result;
    //    }

    public function findByNumRecibo($numRecibo): ?Recibo
    {
        $qb = $this->createQueryBuilder('r')
            ->andWhere('r.numeroRecibo = :numeroRecibo')
            //        ->andWhere('r.situacion = :situacion')
            //        ->andWhere('r.estado = :estado')
            ->setParameter('numeroRecibo', $numRecibo)
            //        ->setParameter('situacion', 'V')
            //        ->setParameter('estado', 'P')
        ;
        $result = $qb->getQuery()->getOneOrNullResult();

        return $result;
    }

    public function findByRecibosPendientesByDni($dni, $letra)
    {
        return $this->findByRecibosDni($dni, $letra, Recibo::ESTADO_PENDIENTE, Recibo::SITUACION_VOLUNTARIA);
    }

    public function findByRecibosDni($dni, $letra, $estado = Recibo::ESTADO_PENDIENTE, $situacion = Recibo::SITUACION_VOLUNTARIA)
    {
        $qb = $this->createQueryBuilder('r')
            ->andWhere('r.dni= :dni')
            ->andWhere('r.letra= :letra')
            ->andWhere('r.situacion = :situacion')
            ->andWhere('r.estado = :estado')
            ->setParameter('dni', $dni)
            ->setParameter('letra', $letra)
            ->setParameter('situacion', $situacion)
            ->setParameter('estado', $estado);
        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function findDeudaByDni($dni)
    {
        try {
            $query = $qb = $this->createQueryBuilder('r')
                ->select('SUM(r.importeTotal) as importe')
                ->andWhere('r.dni= :dni')
                ->andWhere('r.estado = :estado')
                ->andWhere('r.situacion = :situacion')
                ->andWhere('r.paralizado = :paralizado')
                ->andWhere('r.propuestoBaja = :propuestoBaja')
                ->andWhere('r.incluidoEnPlanDePagos = :incluidoEnPlanDePagos')
                ->andWhere('r.esPadreFracciones = :esPadreFracciones')
                ->setParameter('dni', $dni)
                ->setParameter('estado', Recibo::ESTADO_PENDIENTE)
                ->setParameter('situacion', Recibo::SITUACION_EJECUTIVA)
                ->setParameter('paralizado', 'F')
                ->setParameter('propuestoBaja', 'F')
                ->setParameter('incluidoEnPlanDePagos', 'F')
                ->setParameter('esPadreFracciones', 'F')
                ->groupBy('r.dni')
                ->getQuery();

            $importe = $query->getSingleScalarResult();
        } catch (NoResultException $e) {
            return '0';
        }

        return $importe;
    }

    private function __remove_blank_filters($criteria)
    {
        $new_criteria = [];
        foreach ($criteria as $key => $value) {
            if (!empty($value)) {
                $new_criteria[$key] = $value;
            }
        }

        return $new_criteria;
    }
}
